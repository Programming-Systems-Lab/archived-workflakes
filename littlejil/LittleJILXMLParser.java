
package psl.workflakes.littlejil;

import java.io.*;
import java.util.Enumeration;

import org.apache.log4j.Logger;
import psl.workflakes.littlejil.xmlschema.*;

/*
 * This class parses an XML Little-JIL document into classes that
 * were auto-generated by Castor using a LittleJIL XML schema
 * @author matias
 */
public class LittleJILXMLParser {

    private static final Logger logger = Logger.getLogger(LittleJILXMLParser.class);

    public static final void main(String args[]) {

        if (args.length == 0) {
            logger.fatal("Usage: XMLParser file.xmlschema");
            return;
        }

        // the root element of a little-jil document is the Program
        final String filename = args[0];


        try {
            Diagram diagram = loadDiagram(filename);

            outputDiagram(diagram);

        } catch (Exception e) {
            logger.error("There was a problem unmarshalling file",e);
        }


    }

    public static Diagram loadDiagram(final String filename) throws FileNotFoundException, org.exolab.castor.xml.MarshalException, org.exolab.castor.xml.ValidationException {

        logger.debug("unmarshaling xml source...");
        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(filename)));
        Program program = Program.unmarshal(reader);

        // get main "diagram"
        Diagram diagram = program.getDiagram()[0];
        logger.debug("unmarshaling done.");
        return diagram;
    }

    public static void outputDiagram(Diagram diagram) {
        // just print out steps for now
        for (Enumeration steps = diagram.enumerateStep(); steps.hasMoreElements();) {
            Step step = (Step) steps.nextElement();
            logger.debug(stepToString(step));

            // print out substeps
            if (step.getSubsteps() != null) {
                for (Enumeration substeps = step.getSubsteps().enumerateSubstepBinding(); substeps.hasMoreElements();) {
                    SubstepBinding binding = (SubstepBinding) substeps.nextElement();
                    logger.debug("\t substep " + stepToString((Step) binding.getTarget()));
                }
            }
        }
    }


    private static String stepToString(Step step) {
        return "[" + step.getName() + ", id=" + step.getId() + "]";
    }


}
